package org.elusive.sound.play;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;

import org.elusive.ui.action.MyAction;
import org.elusive.ui.resources.Icons;

public class PlayPanel extends JPanel implements Playable {

	
	private Playable playable;
	private Thread th;
	
	private MyAction playAction;
	private MyAction pauseAction;
	private MyAction stopAction;

	public PlayPanel(Playable p){
		super(new GridBagLayout());
		this.playable = p;
		
		// actions
		playAction = new MyAction("Play", null, "Play", Icons.PLAY_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				play();
			}
		};
		pauseAction = new MyAction("Pause", null, "Pause", Icons.PAUSE_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				pause();
			}
		};
		stopAction = new MyAction("Stop", null, "Stop", Icons.STOP_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				stop();
			}
		};


		// Action mapping : ESPACE = PLAY/PAUSE
//		InputMap inputMap = play.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
//		inputMap.put(KeyStroke.getKeyStroke(' '), "playPause");		
//		ActionMap actionMap = play.getActionMap();
//		actionMap.put("playPause", new AbstractAction() {			
//			@Override
//			public void actionPerformed(ActionEvent arg0) {
//				if( !play() ) playable.pause();				
//			}
//		});
//		
//		JButton pause = newButton("images/pause.png", new ActionListener() {			
//			public void actionPerformed(ActionEvent e) {
//				playable.pause();
//			}
//		});
//		JButton stop = newButton("images/stop.png", new ActionListener() {			
//			public void actionPerformed(ActionEvent e) {
//				playable.stop();
//			}
//		});
		
		// Layout
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		this.add(createButton(playAction), gbc);
		gbc.gridx ++;
		this.add(createButton(pauseAction), gbc);
		gbc.gridx ++;
		this.add(createButton(stopAction), gbc);
		
	}
	
	
	public boolean play(){
		if( playable.isPlaying() ){
			return false;
		}
		th = new Thread(playable);
		th.start();
		return true;
	}
	
	private JButton createButton(Action action){
		JButton button = new JButton();
		button.setAction(action);
		button.setText("");
		button.setBorderPainted(false);
		return button;
	}


	@Override
	public void run() {
		play();
	}


	@Override
	public void pause() {
		playable.pause();
	}


	@Override
	public void stop() {
		playable.stop();
	}


	@Override
	public boolean isPlaying() {
		return playable.isPlaying();
	}
}
