package org.elusive.sound.rythm;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.swing.JPanel;

import org.elusive.sound.blocs.frequenceur.NotePlacee;
import org.elusive.sound.genetics.Geneticable;
import org.elusive.sound.melody.tabs.Couplet;
import org.elusive.sound.melody.tabs.GuitarTab;
import org.elusive.sound.melody.tabs.TabNote;
import org.elusive.sound.melody.tabs.Tranche;


public class Rythm extends ArrayList<Hit> implements Geneticable{

	
	public Rythm() {
	}

//	public List<Hit> getHits() {
//		return hits;
//	}
//
//	public void setHits(List<Hit> hits) {
//		this.hits = hits;
//	}
	
//	public void applyTo( List<NotePlacee> notes ){
////		System.out.println("***Rythm.applyTo(notes)");
//		int nbHits = this.size();
//		int nbNotes = notes.size();
//		int note = 0;
//		for (int i = 0; i < nbHits && note < nbNotes; i++) {
//			int offset = notes.get(note).getDebut();
////			System.out.println("int offset = "+offset);
//			do{
////				System.out.println(" - "+notes.get(note)+" devient offset = "+hits.get(i)+")");
//				notes.get(note).setDebut(this.get(i).getOffset());
//				note++;
////				if( note < notes.size() )System.out.println("note++ = "+note+", next.getDebut="+notes.get(note).getDebut()+", offset = "+offset);
//			}while( note < notes.size() && notes.get(note).getDebut()==offset );
//				
//			
//		}
//	}
	
	public List<NotePlacee> applyTo( GuitarTab tab ){
//		System.out.println("***Rythm.applyTo(tab)");
		List<NotePlacee> notes = new ArrayList<NotePlacee>();
		
		List<Couplet> couplets = tab.getCouplets();
		int iTranche = -1;
		int offset = 0;
		grandeBoucle:for (Couplet couplet : couplets) {
			for (Tranche tranche : couplet) {
				iTranche ++;
				if( iTranche >= this.size() ){
					break grandeBoucle;
				}
				offset += this.get(iTranche).getOffset();
				int length = this.get(iTranche).getLength();
				for (TabNote note : tranche) {
					List<NotePlacee> notesPlacees = note.toNotesPlacees(offset, length);
					notes.addAll(notesPlacees);
				}
			}
		}
		return notes;
	}
	
	public String toString(){
		StringBuilder sb = new StringBuilder("Rythm[");
		for(int i = 0, l = this.size(); i < l; i++){
			sb.append(this.get(i).getOffset());
			sb.append(", ");
		}
		return sb.toString();
	}
	
	public static Rythm createSimple(int nHits){
		Rythm rythm = new Rythm();
		rythm.add(new Hit(0));
		for (int i = 0; i < nHits-1; i++) {
			rythm.add(new Hit(22000));
		}
		return rythm;
	}

	public void addHit(int hit) {
		int somme = 0;
		for (int i = 0, l = this.size(); i < l; i++) {
			int offsetSuivant = this.get(i).getOffset();
			somme += offsetSuivant;
			if( hit < somme ){
				int difference = somme - hit;
				this.add(i, new Hit(offsetSuivant - difference));
				this.get(i+1).setOffset(difference);
				return;
			}
		}
		this.add(new Hit(hit - somme));
	}
	
	
	
	////////////////// GENETICS //////////////////

	@Override
	public Geneticable mutate(double strength) {
		// TODO Auto-generated method stub
		Rythm rythm = new Rythm();
		
		//bag of balls
		List<Boolean> bag = new ArrayList<Boolean>();
		int i = 0;
		int n = (int)(strength* this.size() * 0.5); //change one hit out of 2 when strength = 1
		for(; i < n; i++){ 
			bag.add(true);
		}
		for(; i < this.size(); i++){
			bag.add(false);
		}

		Random rand = new Random();
		for(Hit hit : this){
			int offset = hit.getOffset();
			int length = hit.getLength();
			if( bag.get(rand.nextInt(bag.size()-1)) ){
				//TODO change hit intelligently
				double f = rand.nextBoolean()?2:0.5;
				offset = (int) (offset * f);
			}

			rythm.add(new Hit(offset, length));
		}
		
		return rythm;
	}

	@Override
	public Geneticable combineWith(Geneticable gen) {
		// TODO Auto-generated method stub
		return this;
	}

	@Override
	public JPanel getPreviewPanel() {
		return null;
	}

	//TODO maybe some day
//	public static Rythm fromString(String str){
//		Rythm rythm = new Rythm();
//		
//		
//		
//		
//	}
	
}
