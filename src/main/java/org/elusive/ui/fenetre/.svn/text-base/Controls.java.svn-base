package org.elusive.ui.fenetre;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.elusive.main.tools.IOtools;
import org.elusive.sound.blocs.BlocFichier;
import org.elusive.sound.record.MicrophoneRecorder;
import org.elusive.sound.record.MicrophoneRecorderListener;
import org.elusive.ui.action.MyAction;
import org.elusive.ui.config.Colors;
import org.elusive.ui.grille.Grille;
import org.elusive.ui.resources.Icons;

public class BarreControle extends JPanel {

	private static final int VOLUME_MAX = 100;
	
	private MyAction volumeOffAction;
	private MyAction volumeOnAction;
	private MyAction playAction;
	private MyAction pauseAction;
	private MyAction rewindAction;
//	private MyAction stopAction;
	private MyAction recordAction;
	private MyAction zoomInAction;
	private MyAction zoomOutAction;

	private MicrophoneRecorder mic;

	private JSlider echelle = null;

	private JButton volumeButton = null;
	private JSlider volume = null;
	private int lastVolumeValue = 0;
	
	private JButton playButton;

	private final static int[] SCALE_FRAME_CORRESPONDENCE = { -20, -18, -16, -14, -12, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 50, 60, 80, 100, 120, 140, 160, 180, 200, 250, 300, 350, 400, 500, 600, 800, 1000, 1200, 1500, 2000, 2500, 3000, 3500, 4000, 5000 };
	private final static int SCALE_INITIAL_VALUE = 40;
	private int framesPerPixel = SCALE_FRAME_CORRESPONDENCE[SCALE_INITIAL_VALUE];

	private Fenetre fenetre;

	// private Dimension dim = new Dimension(650, 40);

	public BarreControle(Fenetre fenetre_) {
		this.fenetre = fenetre_;

		mic = new MicrophoneRecorder(new MicrophoneRecorderListener() {
			@Override
			public void soundRecorded(File file) {
				fenetre.grille.newBloc(new BlocFichier(file));
			}
		});
		
		this.setBackground(Colors.MAIN_BACKGROUND_1);

		initActions();
		initPanel();
	}

	private void initActions() {
		volumeOffAction = new MyAction("Turn volume off", null, "Turn volume off", null) {
			@Override
			public void actionPerformed(ActionEvent e) {
				turnVolumeOff();
			}
		};
		volumeOnAction = new MyAction("Turn volume on", null, "Turn volume on", Icons.VOLUME_OFF_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				turnVolumeOn();
			}
		};
		playAction = new MyAction("Play", null, "Play", Icons.PLAY_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				play();
			}
		};
		pauseAction = new MyAction("Pause", null, "Pause", Icons.PAUSE_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				pause();
			}
		};
		rewindAction = new MyAction("Rewind", null, "Rewind to start", Icons.REWIND_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				rewind();
			}
		};
//		stopAction = new MyAction("Stop", null, "Stop", Icons.STOP_ICON) {
//			@Override
//			public void actionPerformed(ActionEvent e) {
//				stop();
//			}
//		};
//		stopAction.setEnabled(false);
		recordAction = new MyAction("Record", null, "Record from microphone", Icons.RECORD_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				record();
			}
		};
		zoomInAction = new MyAction("Zoom in", null, "Zoom in", Icons.ZOOM_IN_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				zoomIn();
			}
		};
		zoomOutAction = new MyAction("Zoom out", null, "Zoom out", Icons.ZOOM_OUT_ICON) {
			@Override
			public void actionPerformed(ActionEvent e) {
				zoomOut();
			}
		};
	}

	private void turnVolumeOff() {
		System.out.println("BarreControle.turnVolumeOff()");
		if (volume.getValue() > 0) {
			lastVolumeValue = volume.getValue();
			volume.setValue(0);
			volumeOnAction.attachToButton(volumeButton);
			chooseCorrectVolumeIcon();
		}
	}

	private void turnVolumeOn() {
		System.out.println("BarreControle.turnVolumeOn()");
		if (volume.getValue() == 0) {
			volume.setValue(lastVolumeValue);
			volumeOffAction.attachToButton(volumeButton);
			chooseCorrectVolumeIcon();
		}
	}

	private void record() {
		if (!mic.isRecording()) {
			try {
				File file = IOtools.createTempFile("record", ".wav", IOtools.getTemporaryFolder());
				mic.recordOnto(file);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		} else {
			mic.stopRecord();
		}
	}

	private void zoomIn() {
		int val = echelle.getValue();
		if (val != echelle.getMinimum())
			echelle.setValue(val - 1);
		updateZoomEnabled();
	}

	private void zoomOut() {
		int val = echelle.getValue();
		if (val != echelle.getMaximum())
			echelle.setValue(val + 1);
		updateZoomEnabled();
	}

	private void updateZoomEnabled() {
		zoomInAction.setEnabled(echelle.getValue() > echelle.getMinimum());
		zoomOutAction.setEnabled(echelle.getValue() < echelle.getMaximum());
	}

	private void initPanel() {
		echelle = new JSlider(JSlider.HORIZONTAL, 0, SCALE_FRAME_CORRESPONDENCE.length - 1, SCALE_INITIAL_VALUE);
		echelle.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int oldPos = fenetre.grille.getPanelGrille().offset2pixel(fenetre.grille.curseur);
				framesPerPixel = SCALE_FRAME_CORRESPONDENCE[echelle.getValue()];
				fenetre.grille.updateScrollH(oldPos);
			}
		});

		volumeButton = volumeOffAction.createSimpleIconButton();
		volume = new JSlider(JSlider.HORIZONTAL, 0, VOLUME_MAX, (int) (Grille.getVolume() * VOLUME_MAX));
		volume.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent arg0) {
				Grille.setVolume(volume.getValue() / (float) VOLUME_MAX);
				if (volume.getValue() == 0) {
					volumeButton.setIcon(Icons.VOLUME_OFF_ICON);
				} else {
					if( volumeButton.getAction().equals(volumeOnAction) ){
						volumeOffAction.attachToButton(volumeButton);
					}
				}
				chooseCorrectVolumeIcon();
			}
		});
		chooseCorrectVolumeIcon();
		
		playButton = playAction.createSimpleIconButton();

		// Layout
		this.setLayout(new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridx = 5;
		this.add(volumeButton, gbc);
		gbc.gridx ++;
		this.add(volume, gbc);

		gbc.insets = new Insets(0, 40, 0, 0);
		gbc.gridx ++;
		this.add(rewindAction.createSimpleIconButton(), gbc);
		gbc.insets = new Insets(0, 0, 0, 0);
		gbc.gridx ++;
		this.add(playButton, gbc);
//		gbc.insets = new Insets(0, 0, 0, 0);
//		gbc.gridx ++;
//		this.add(pauseAction.createSimpleIconButton(), gbc);
//		gbc.gridx ++;
//		gbc.insets = new Insets(0, 0, 0, 10);
//		this.add(stopAction.createSimpleIconButton(), gbc);
		gbc.gridx ++;
		gbc.insets = new Insets(0, 0, 0, 40);
		this.add(recordAction.createSimpleIconButton(), gbc);

		gbc.insets = new Insets(0, 0, 0, 0);
		gbc.gridx ++;
		this.add(zoomInAction.createSimpleIconButton(), gbc);
		gbc.gridx ++;
		this.add(echelle, gbc);
		gbc.gridx ++;
		this.add(zoomOutAction.createSimpleIconButton(), gbc);
	}
	
	private void chooseCorrectVolumeIcon(){
		int value = volume.getValue();
		int max = volume.getMaximum();
		if( value == 0){
			volumeButton.setIcon(Icons.VOLUME_OFF_ICON);
		}else if( value < max/3){
			volumeButton.setIcon(Icons.VOLUME_ICON_1);
		}else if( value < max*2/3){
			volumeButton.setIcon(Icons.VOLUME_ICON_2);
		}else{
			volumeButton.setIcon(Icons.VOLUME_ICON_3);
		}
	}

	public int getFramesPerPixel() {
		return framesPerPixel;
	}

	public void play() {
		new Thread(fenetre.grillePlayer).start();
		pauseAction.attachToButton(playButton);
//		playAction.setEnabled(false);
//		pauseAction.setEnabled(true);
//		stopAction.setEnabled(true);
	}

	public void pause() {
		fenetre.grillePlayer.pause();
		playAction.attachToButton(playButton);
//		pauseAction.setEnabled(false);
//		stopAction.setEnabled(false);
//		playAction.setEnabled(true);

	}
	
	public void rewind(){
		fenetre.grille.curseur = 0;
		fenetre.grille.repaint();
	}

//	public void stop() {
//		fenetre.grillePlayer.pause();
//		fenetre.grille.curseur = 0;
//		fenetre.grille.repaint();
//		pauseAction.setEnabled(false);
//		stopAction.setEnabled(false);
//		playAction.setEnabled(true);
//	}

	public void changeZoom(int n) {
		if (n > 0) {
			for (int i = 0; i < n; i++) {
				zoomIn();
			}
		} else if (n < 0) {
			for (int i = 0; i > n; i--) {
				zoomOut();
			}
		}

	}

}
