package org.elusive.sound.record;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFileFormat.Type;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

import org.elusive.sound.blocs.BlocFichier;
import org.elusive.sound.play.BufferedData;
import org.elusive.sound.play.DataPlayer;
import org.elusive.sound.play.PlayableAudio;

public class MicrophoneRecorder {

	private TargetDataLine targetDataLine;
	private boolean recording = false;
	private File audioFile;

	
	private List<MicrophoneRecorderListener> listeners = new ArrayList<MicrophoneRecorderListener>();

	public MicrophoneRecorder(MicrophoneRecorderListener lis) {
		addMicrophoneRecorderListener(lis);
	}

	public void addMicrophoneRecorderListener(MicrophoneRecorderListener lis) {
		listeners.add(lis);
	}

	class CaptureThread extends Thread {
		public void run() {
			AudioFormat audioFormat = getAudioFormat();
			DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, audioFormat);
			try {
				targetDataLine = (TargetDataLine) AudioSystem.getLine(dataLineInfo);
			} catch (LineUnavailableException e1) {
				e1.printStackTrace();
				return;
			}

			Type fileType = AudioFileFormat.Type.WAVE;

			try {
				targetDataLine.open(audioFormat);
				targetDataLine.start();
				
				recording = true;
				AudioSystem.write(new AudioInputStream(targetDataLine), fileType, audioFile);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void record() {
		new CaptureThread().start();
	}
	
	public void recordOnto( File file ){
		audioFile = file;
		record();
	}

	public void stopRecord() {
		if (targetDataLine != null) {
			targetDataLine.stop();
			targetDataLine.close();

			if (audioFile != null) {
				for (MicrophoneRecorderListener lis : listeners) {
					lis.soundRecorded(audioFile);
				}
			}
		}
		recording = false;
		audioFile = null;
	}

	public boolean isRecording() {
		return recording;
	}

	private AudioFormat getAudioFormat() {
		float sampleRate = 44100.0F;
		// 8000,11025,16000,22050,44100
		int sampleSizeInBits = 16;
		// 8,16
		int channels = 1;
		boolean signed = true;
		boolean bigEndian = false;
		return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
	}// end getAudioFormat

	public JPanel getPanel() {
		JPanel panel = new JPanel();

		final JButton recordButton = new JButton("Record");
		recordButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (!isRecording()) {
					record();
					recordButton.setText("recording...");
				} else {
					stopRecord();
					recordButton.setText("Record");
				}
			}
		});

		panel.add(recordButton);

		return panel;
	}
	
//	public static void main(String[] args) {
//		
//		MicrophoneRecorder mic = new MicrophoneRecorder(new MicrophoneRecorderListener() {
//			@Override
//			public void soundRecorded(final BlocFichier bloc) {
//				System.out.println("Sound RECORDED : "+bloc);
//				
////				PlayableAudio p = new PlayableAudio(new BufferedData() {
////					@Override
////					public void initData() {
////					}
////					
////					@Override
////					public float[] getNextData() {
////						return bloc.generateData();
////					}
////				});
////				new Thread(p).start();
//			}
//		});
//		
//		JFrame frame = new JFrame();
//		frame.getContentPane().add(mic.getPanel());
//		frame.pack();
//		frame.setLocationRelativeTo(null);
//		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//		frame.setVisible(true);
//	}
	
	
}
