package org.elusive.sound.rythm;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.KeyStroke;

import org.elusive.sound.analyse.PartitionExtractor;


public class RythmRecorder extends JButton {

	private Rythm rythm = new Rythm();
	private boolean recording = false;
	private long previousHit = -1;
	private RythmRecorderListener listener;

	public RythmRecorder(RythmRecorderListener rrl) {
		super("Record");
		
		listener = rrl;

		this.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (!recording) {
					recording = true;
					RythmRecorder.this.setText("recording...");
				} else {
					recording = false;
					RythmRecorder.this.setText("Record");
					listener.whenRecordFinished(rythm);
					rythm = new Rythm();
					previousHit = -1;
				}
			}
		});

		InputMap inputMap = this.getInputMap(JComponent.WHEN_FOCUSED);
		inputMap.put(KeyStroke.getKeyStroke('a'), "hit");

		ActionMap actionMap = this.getActionMap();
		actionMap.put("hit", new AbstractAction() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if (recording) {
					hit();
					listener.whenRythmChanged(rythm);
				}
			}
		});

	}

	public void hit() {
		if (previousHit == -1) {
			previousHit = System.currentTimeMillis();
		}
		long difference = System.currentTimeMillis() - previousHit;
		int offset = (int) ((difference) / (double) 1000 * 44100);
		if( !rythm.isEmpty() ){
			rythm.get(rythm.size()-1).setLength(offset);
		}
		rythm.add(new Hit(offset));
		previousHit += difference;
	}

	public void setRythm(Rythm rythm) {
		this.rythm = rythm;
	}

	public Rythm getRythm() {
		return rythm;
	}


}
